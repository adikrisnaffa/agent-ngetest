/**
 * @fileoverview Firestore Security Rules for Automation Aent application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control
 * over the projects, object repositories, end-to-end flows, and test cases they own.
 *
 * Data Structure:
 * Data is organized hierarchically under /users/{userId}. Projects, object repositories,
 * end-to-end flows, and test cases are all nested within this structure, enabling
 * path-based authorization.
 *
 * Key Security Decisions:
 * - Users can only manage data under their own user ID.
 * - List operations are allowed for owners within their user data tree.
 * - Data types and schema are not strictly enforced in this prototyping phase,
 *   except where necessary for authorization and relationship integrity.
 *
 * Denormalization for Authorization:
 * The data structure leverages path-based ownership to simplify security rules,
 * avoiding the need for additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to Project documents.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User 'user123' can create a project under their own user ID.
     * @allow (get) User 'user123' can read a project under their own user ID.
     * @allow (update) User 'user123' can update a project under their own user ID.
     * @allow (delete) User 'user123' can delete a project under their own user ID.
     * @deny (create) User 'user456' cannot create a project under user 'user123''s ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ObjectRepository documents.
     * @path /users/{userId}/projects/{projectId}/objectRepositories/{objectRepositoryId}
     * @allow (create) User 'user123' can create an object repository under their own project.
     * @allow (get) User 'user123' can read an object repository under their own project.
     * @allow (update) User 'user123' can update an object repository under their own project.
     * @allow (delete) User 'user123' can delete an object repository under their own project.
     * @deny (create) User 'user456' cannot create an object repository under user 'user123''s project.
     * @principle Enforces project-level ownership for object repositories.
     */
    match /users/{userId}/projects/{projectId}/objectRepositories/{objectRepositoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.projectId == projectId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to EndToEndFlow documents.
     * @path /users/{userId}/projects/{projectId}/endToEndFlows/{endToEndFlowId}
     * @allow (create) User 'user123' can create an end-to-end flow under their own project.
     * @allow (get) User 'user123' can read an end-to-end flow under their own project.
     * @allow (update) User 'user123' can update an end-to-end flow under their own project.
     * @allow (delete) User 'user123' can delete an end-to-end flow under their own project.
     * @deny (create) User 'user456' cannot create an end-to-end flow under user 'user123''s project.
     * @principle Enforces project-level ownership for end-to-end flows.
     */
    match /users/{userId}/projects/{projectId}/endToEndFlows/{endToEndFlowId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.projectId == projectId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to TestCase documents.
     * @path /users/{userId}/projects/{projectId}/endToEndFlows/{endToEndFlowId}/testCases/{testCaseId}
     * @allow (create) User 'user123' can create a test case under their own end-to-end flow.
     * @allow (get) User 'user123' can read a test case under their own end-to-end flow.
     * @allow (update) User 'user123' can update a test case under their own end-to-end flow.
     * @allow (delete) User 'user123' can delete a test case under their own end-to-end flow.
     * @deny (create) User 'user456' cannot create a test case under user 'user123''s end-to-end flow.
     * @principle Enforces flow-level ownership for test cases.
     */
    match /users/{userId}/projects/{projectId}/endToEndFlows/{endToEndFlowId}/testCases/{testCaseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.endToEndFlowId == endToEndFlowId;
      allow update: if isExistingOwner(userId) && request.resource.data.endToEndFlowId == resource.data.endToEndFlowId;
      allow delete: if isExistingOwner(userId);
    }
  }
}