{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within the Automation Aent application.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "status": {
          "type": "string",
          "description": "The current status of the project.",
          "enum": [
            "Development",
            "Ready for Testing",
            "Bug",
            "Testing",
            "Ready to Prod",
            "Deploy"
          ]
        },
        "createdAt": {
          "type": "string",
          "description": "The timestamp indicating when the project was created.",
          "format": "date-time"
        }
      },
      "required": [
        "name",
        "status",
        "createdAt"
      ]
    },
    "ObjectRepository": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ObjectRepository",
      "type": "object",
      "description": "Represents an object repository containing UI elements for testing.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ObjectRepository entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N ObjectRepository)"
        },
        "name": {
          "type": "string",
          "description": "The name of the object repository."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the object repository."
        },
        "elements": {
          "type": "array",
          "description": "Array of UI elements within the object repository.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "The timestamp indicating when the object repository was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "The timestamp indicating when the object repository was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "projectId",
        "name",
        "description",
        "elements",
        "createdAt",
        "updatedAt"
      ]
    },
    "EndToEndFlow": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EndToEndFlow",
      "type": "object",
      "description": "Represents an end-to-end flow designed using the drag-and-drop interface.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the EndToEndFlow entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N EndToEndFlow)"
        },
        "name": {
          "type": "string",
          "description": "The name of the end-to-end flow."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the end-to-end flow."
        },
        "steps": {
          "type": "array",
          "description": "Array of steps that make up the end-to-end flow.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "The timestamp indicating when the end-to-end flow was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "The timestamp indicating when the end-to-end flow was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "projectId",
        "name",
        "description",
        "steps",
        "createdAt",
        "updatedAt"
      ]
    },
    "TestCase": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TestCase",
      "type": "object",
      "description": "Represents a test case automatically generated from an end-to-end flow.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TestCase entity."
        },
        "endToEndFlowId": {
          "type": "string",
          "description": "Reference to EndToEndFlow. (Relationship: EndToEndFlow 1:N TestCase)"
        },
        "name": {
          "type": "string",
          "description": "The name of the test case."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the test case."
        },
        "platform": {
          "type": "string",
          "description": "The testing platform for which the test case is generated (e.g., Playwright, Cypress, Selenium)."
        },
        "code": {
          "type": "string",
          "description": "The generated test case code."
        },
        "createdAt": {
          "type": "string",
          "description": "The timestamp indicating when the test case was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "The timestamp indicating when the test case was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "endToEndFlowId",
        "name",
        "description",
        "platform",
        "code",
        "createdAt",
        "updatedAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores projects owned by users. Path-based ownership enables simple security rules based on userId and projectId.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the project."
            },
            {
              "name": "projectId",
              "description": "The unique ID of the project."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/objectRepositories/{objectRepositoryId}",
        "definition": {
          "entityName": "ObjectRepository",
          "schema": {
            "$ref": "#/backend/entities/ObjectRepository"
          },
          "description": "Stores object repositories associated with a specific project.  Enables listing object repositories for a given project and enforces project-level authorization based on the user and project IDs.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the project."
            },
            {
              "name": "projectId",
              "description": "The ID of the project the object repository belongs to."
            },
            {
              "name": "objectRepositoryId",
              "description": "The unique ID of the object repository."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/endToEndFlows/{endToEndFlowId}",
        "definition": {
          "entityName": "EndToEndFlow",
          "schema": {
            "$ref": "#/backend/entities/EndToEndFlow"
          },
          "description": "Stores end-to-end flows associated with a specific project. Enables listing flows for a given project and enforces project-level authorization based on the user and project IDs.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the project."
            },
            {
              "name": "projectId",
              "description": "The ID of the project the end-to-end flow belongs to."
            },
            {
              "name": "endToEndFlowId",
              "description": "The unique ID of the end-to-end flow."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/endToEndFlows/{endToEndFlowId}/testCases/{testCaseId}",
        "definition": {
          "entityName": "TestCase",
          "schema": {
            "$ref": "#/backend/entities/TestCase"
          },
          "description": "Stores test cases generated from an end-to-end flow. Maintains a clear hierarchy and enables authorization based on the flow and project ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the project."
            },
            {
              "name": "projectId",
              "description": "The ID of the project the end-to-end flow belongs to."
            },
            {
              "name": "endToEndFlowId",
              "description": "The ID of the end-to-end flow the test case is generated from."
            },
            {
              "name": "testCaseId",
              "description": "The unique ID of the test case."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the core features of the Automation Aent application, focusing on object repository building, end-to-end flow design, and automated test case generation. The structure prioritizes authorization independence and simplifies security rules using denormalization. It leverages path-based ownership where applicable.\n\n**Authorization Independence:** Authorization is enforced independently at each level by structuring data in hierarchical paths based on ownership and by including necessary ownership or membership data directly within subcollection documents. This avoids `get()` calls in security rules.\n\n**QAPs (Rules are not Filters):** The data structure supports secure `list` operations by segregating data with different access requirements into distinct collections. For instance, projects are under `/users/{userId}/projects/{projectId}` ensuring only the project owner or members can list projects they have access to.\n\n**Structure Overview:**\n\n*   **`/users/{userId}/projects/{projectId}`**: Projects are nested under user documents. This structure enables simple rules based on the user ID.  All project related data (object repositories, flows, test cases) are stored as subcollections for clear ownership and access control.\n*   **`/users/{userId}/projects/{projectId}/objectRepositories/{objectRepositoryId}`**: Object repositories are subcollections of projects. This allows easy listing of object repositories belonging to a specific project and enforces project-level authorization.\n*   **`/users/{userId}/projects/{projectId}/endToEndFlows/{endToEndFlowId}`**: End-to-end flows are stored as subcollections of projects, enabling simple listing and authorization based on project membership.\n*   **`/users/{userId}/projects/{projectId}/endToEndFlows/{endToEndFlowId}/testCases/{testCaseId}`**: Test cases are nested under their respective end-to-end flows. This structure maintains a clear relationship between flows and their generated test cases."
  }
}
    